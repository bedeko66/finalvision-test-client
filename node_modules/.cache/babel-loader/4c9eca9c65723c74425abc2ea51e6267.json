{"ast":null,"code":"var _jsxFileName = \"/Users/bedeko/dev/finervision_dev_test/client/src/Step1.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom';\nimport { useData } from \"./DataContext\";\nimport Joi from \"joi-browser\";\nimport { toast } from 'react-toastify';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Step1 = () => {\n  _s();\n\n  const {\n    setValues,\n    data\n  } = useData();\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm({\n    defaultValues: {\n      firstName: data.firstName,\n      surname: data.surname,\n      email: data.email\n    },\n    mode: \"onBlur\"\n  });\n  useEffect(() => {\n    // const base = {}\n    setValues({\n      firstName: \"\",\n      surname: \"\",\n      email: \"\",\n      phone: \"\",\n      gender: \"\",\n      birthdate: \"\",\n      birthyear: \"\",\n      birthmonth: \"\",\n      birthday: \"\",\n      comments: \"\"\n    }); // eslint-disable-next-line\n  }, []);\n  const history = useHistory();\n  const schema = {\n    firstName: Joi.string().alphanum().min(1).max(50).required().label(\"First Name\"),\n    surname: Joi.string().alphanum().min(2).max(50).required().label(\"Surname\"),\n    email: Joi.string().email().required().label(\"Email\")\n  };\n\n  const validate = usrData => {\n    const options = {\n      abortEarly: false\n    };\n    let ifNo = {\n      isNumber: function (str) {\n        var pattern = /[^a-zA-Z]/g;\n        return pattern.test(str);\n      }\n    };\n\n    if (ifNo.isNumber(usrData.firstName)) {\n      toast.error('Only text allowed');\n      return;\n    }\n\n    const result = Joi.validate(usrData, schema, options);\n    if (!result.error) return null;\n    let v_errors = {};\n\n    for (let item of result.error.details) {\n      v_errors[item.path[0]] = item.message;\n    }\n\n    return v_errors;\n  };\n\n  const onSubmit = data => {\n    let usrData = data;\n    let errors = validate(usrData);\n\n    if (errors) {\n      Object.values(errors).forEach(err => {\n        toast.error(err);\n        return;\n      });\n    } else {\n      setValues(data);\n      history.push(\"/step2\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container m-2\",\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"module p-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Step 1: Your details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"firstName\",\n          children: \"First Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"firstName\",\n          name: \"firstName\",\n          type: \"text\",\n          ...register('firstName')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"surname\",\n          children: \"Surname\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register('surname'),\n          id: \"surname\",\n          name: \"surname\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register('email'),\n          id: \"email\",\n          name: \"email\",\n          type: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary\",\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Step 2: More comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Step 3: Final comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Step1, \"9rdyszNJ2/GN1MA52f85Gpl2X3Q=\", false, function () {\n  return [useData, useForm, useHistory];\n});\n\n_c = Step1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Step1\");","map":{"version":3,"sources":["/Users/bedeko/dev/finervision_dev_test/client/src/Step1.js"],"names":["React","useState","useEffect","useForm","useHistory","useData","Joi","toast","Step1","setValues","data","register","handleSubmit","errors","defaultValues","firstName","surname","email","mode","phone","gender","birthdate","birthyear","birthmonth","birthday","comments","history","schema","string","alphanum","min","max","required","label","validate","usrData","options","abortEarly","ifNo","isNumber","str","pattern","test","error","result","v_errors","item","details","path","message","onSubmit","Object","values","forEach","err","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom';\nimport { useData } from \"./DataContext\";\nimport Joi from \"joi-browser\";\nimport { toast } from 'react-toastify';\n\nimport './App.css';\n\nexport const Step1 = () => {\n\n    const { setValues, data } = useData();\n\n    const { register, handleSubmit, errors } = useForm({\n        defaultValues: { firstName: data.firstName, surname: data.surname, email: data.email },\n        mode: \"onBlur\",\n    });\n\n    useEffect(() => { \n       \n        // const base = {}\n        setValues({\n            firstName:\"\",\n            surname:\"\" ,\n            email:\"\",\n            phone: \"\",\n            gender: \"\",\n            birthdate: \"\" ,\n            birthyear: \"\" ,\n            birthmonth: \"\" ,\n            birthday: \"\" ,\n            comments:\"\"\n        })\n        // eslint-disable-next-line\n    },[]);\n\n    const history = useHistory();\n\n    const schema = {\n        firstName: Joi.string().alphanum().min(1).max(50).required().label(\"First Name\"),\n        surname: Joi.string().alphanum().min(2).max(50).required().label(\"Surname\"),\n        email: Joi.string().email().required().label(\"Email\"),\n    }\n\n    const validate = (usrData) => {\n        const options = { abortEarly: false };\n        let ifNo = {\n            isNumber:function(str) {\n                var pattern = /[^a-zA-Z]/g;\n                return pattern.test(str);\n            }\n        }\n        if (ifNo.isNumber(usrData.firstName)){\n            toast.error('Only text allowed')\n            return \n        }\n       \n        const result = Joi.validate(usrData, schema, options);\n        if (!result.error) return null;\n        \n        let v_errors = {};\n        for (let item of result.error.details) {\n            v_errors[item.path[0]] = item.message;\n        }\n        return v_errors;\n    }\n\n    const onSubmit = (data) => {\n        let usrData = data\n\n        \n        let errors = validate(usrData);\n        if (errors) {\n            Object.values(errors).forEach(err => {\n                toast.error(err)\n                return\n            })\n        } else {  \n            setValues(data)\n            history.push(\"/step2\")\n        }\n    }\n\n    return (\n        <div className=\"container m-2\">\n            <section className=\"module p-2\">\n            <h5>Step 1: Your details</h5>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <label htmlFor=\"firstName\">First Name</label>\n                <input \n                    id=\"firstName\"\n                    name=\"firstName\"\n                    type=\"text\"\n                    {...register('firstName')} \n                    />\n                <label htmlFor=\"surname\">Surname</label>\n                <input \n                    {...register('surname')}\n                    id=\"surname\"\n                    name=\"surname\" \n                    type=\"text\" \n                />\n                <label htmlFor=\"email\">Email</label>\n                <input \n                    {...register('email')}\n                    id=\"email\"\n                    name=\"email\" \n                    type=\"email\" \n                />\n                <button type=\"submit\" className=\"btn btn-primary\">Next</button>\n            </form>\n            <h5>Step 2: More comments</h5>\n            <h5>Step 3: Final comments</h5>\n            </section>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}