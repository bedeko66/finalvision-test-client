{"ast":null,"code":"var _jsxFileName = \"/Users/bedeko/dev/finervision_dev_test/client/src/Step1.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom';\nimport { yupResolver } from 'hook';\nimport * as yup from \"@hookform/resolvers\"; // import Joi from \"joi-browser\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = yup.object().shape({\n  firstName: yup.string().matches(/^([^0-9])$/, \"First name shpuld not contain numbers\").required(\"First name is required field\"),\n  surname: yup.string().matches(/^([^0-9])$/, \"surname shpuld not contain numbers\").required(\"surname is required field\"),\n  email: yup.string().email(\"Invalid Email.\").required(\"Email is required\")\n});\nexport const Step1 = () => {\n  _s();\n\n  var _errors$firstName;\n\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm({\n    mode: \"onBlur\",\n    resolver: yupResolver(schema)\n  });\n  const history = useHistory(); // const schema = {\n  //     firstname: Joi.string().min(1).required(),\n  //     surname: Joi.string().min(2).required(),\n  //     email: Joi.string().email().required(),\n  // }\n  // const validate = data => {\n  //     const result = Joi.validate(data, schema, {\n  //         abortEarly: false\n  //     });\n  //     if (!result.error) return null;\n  //     const errors = {};\n  //     for (let item of result.error.details)\n  //         errors[item.path[0]] = item.message;\n  //     return errors;\n  // }\n\n  const onSubmit = data => {\n    console.log(validate(data)); // history.push(\"/step2\")\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Step 1: Your details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", { ...register('firstName', {\n          required: true\n        }),\n        error: !!errors.firstName,\n        helperText: errors === null || errors === void 0 ? void 0 : (_errors$firstName = errors.firstName) === null || _errors$firstName === void 0 ? void 0 : _errors$firstName.message,\n        name: \"firstName\",\n        type: \"text\",\n        placeholder: \"First Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register('surname', {\n          required: true\n        }),\n        name: \"surname\",\n        type: \"text\",\n        placeholder: \"Surname\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register('email', {\n          required: true\n        }),\n        name: \"email\",\n        type: \"email\",\n        placeholder: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: onSubmit,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Step1, \"OxBzvLvyqkluHWa37TdHftQcVy0=\", false, function () {\n  return [useForm, useHistory];\n});\n\n_c = Step1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Step1\");","map":{"version":3,"sources":["/Users/bedeko/dev/finervision_dev_test/client/src/Step1.js"],"names":["React","useForm","useHistory","yupResolver","yup","schema","object","shape","firstName","string","matches","required","surname","email","Step1","register","handleSubmit","errors","mode","resolver","history","onSubmit","data","console","log","validate","message"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,WAAT,QAA4B,MAA5B;AACA,OAAO,KAAKC,GAAZ,MAAqB,qBAArB,C,CAEA;;;AAEA,MAAMC,MAAM,GAAGD,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AAC9BC,EAAAA,SAAS,EAAEJ,GAAG,CAACK,MAAJ,GAAaC,OAAb,CAAqB,YAArB,EAAmC,uCAAnC,EAA4EC,QAA5E,CAAqF,8BAArF,CADmB;AAE9BC,EAAAA,OAAO,EAAER,GAAG,CAACK,MAAJ,GAAaC,OAAb,CAAqB,YAArB,EAAmC,oCAAnC,EAAyEC,QAAzE,CAAkF,2BAAlF,CAFqB;AAG9BE,EAAAA,KAAK,EAAET,GAAG,CAACK,MAAJ,GAAaI,KAAb,CAAmB,gBAAnB,EAAqCF,QAArC,CAA8C,mBAA9C;AAHuB,CAAnB,CAAf;AAOA,OAAO,MAAMG,KAAK,GAAG,MAAM;AAAA;;AAAA;;AAE3B,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA;AAA1B,MAAqChB,OAAO,CAAC;AAC/CiB,IAAAA,IAAI,EAAE,QADyC;AAE/CC,IAAAA,QAAQ,EAAEhB,WAAW,CAACE,MAAD;AAF0B,GAAD,CAAlD;AAIA,QAAMe,OAAO,GAAGlB,UAAU,EAA1B,CAN2B,CAQ3B;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,QAAMmB,QAAQ,GAAIC,IAAD,IAAU;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAQ,CAACH,IAAD,CAApB,EADuB,CAEvB;AACH,GAHD;;AAKI,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEA;AAAA,8BACI,sBAAWP,QAAQ,CAAC,WAAD,EAAc;AAAEJ,UAAAA,QAAQ,EAAE;AAAZ,SAAd,CAAnB;AAAsD,QAAA,KAAK,EAAE,CAAC,CAACM,MAAM,CAACT,SAAtE;AAAiF,QAAA,UAAU,EAAES,MAAF,aAAEA,MAAF,4CAAEA,MAAM,CAAET,SAAV,sDAAE,kBAAmBkB,OAAhH;AAAyH,QAAA,IAAI,EAAC,WAA9H;AAA0I,QAAA,IAAI,EAAC,MAA/I;AAAsJ,QAAA,WAAW,EAAC;AAAlK;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,sBAAWX,QAAQ,CAAC,SAAD,EAAY;AAAEJ,UAAAA,QAAQ,EAAE;AAAZ,SAAZ,CAAnB;AAAoD,QAAA,IAAI,EAAC,SAAzD;AAAmE,QAAA,IAAI,EAAC,MAAxE;AAA+E,QAAA,WAAW,EAAC;AAA3F;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,sBAAWI,QAAQ,CAAC,OAAD,EAAU;AAAEJ,UAAAA,QAAQ,EAAE;AAAZ,SAAV,CAAnB;AAAkD,QAAA,IAAI,EAAC,OAAvD;AAA+D,QAAA,IAAI,EAAC,OAApE;AAA4E,QAAA,WAAW,EAAC;AAAxF;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAEU,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CA1CM;;GAAMP,K;UAE8Bb,O,EAI3BC,U;;;KANHY,K","sourcesContent":["import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom';\nimport { yupResolver } from 'hook';\nimport * as yup from \"@hookform/resolvers\";\n\n// import Joi from \"joi-browser\";\n\nconst schema = yup.object().shape({\n    firstName: yup.string().matches(/^([^0-9])$/, \"First name shpuld not contain numbers\").required(\"First name is required field\"),\n    surname: yup.string().matches(/^([^0-9])$/, \"surname shpuld not contain numbers\").required(\"surname is required field\"),\n    email: yup.string().email(\"Invalid Email.\").required(\"Email is required\"),\n\n})\n\nexport const Step1 = () => {\n\nconst { register, handleSubmit, errors } = useForm({\n    mode: \"onBlur\",\n    resolver: yupResolver(schema)\n})\nconst history = useHistory();\n\n// const schema = {\n//     firstname: Joi.string().min(1).required(),\n//     surname: Joi.string().min(2).required(),\n//     email: Joi.string().email().required(),\n// }\n\n// const validate = data => {\n//     const result = Joi.validate(data, schema, {\n//         abortEarly: false\n//     });\n//     if (!result.error) return null;\n    \n//     const errors = {};\n//     for (let item of result.error.details)\n//         errors[item.path[0]] = item.message;\n//     return errors;\n// }\n\nconst onSubmit = (data) => {\n    console.log(validate(data))\n    // history.push(\"/step2\")\n}\n\n    return (\n        <div>\n            <h2>Step 1: Your details</h2>\n        <form>\n            <input {...register('firstName', { required: true })} error={!!errors.firstName} helperText={errors?.firstName?.message} name=\"firstName\" type=\"text\" placeholder=\"First Name\" />\n            <input {...register('surname', { required: true })} name=\"surname\" type=\"text\" placeholder=\"Surname\" />\n            <input {...register('email', { required: true })} name=\"email\" type=\"email\" placeholder=\"Email\" />\n            <button type=\"button\" onClick={onSubmit}>Next</button>\n        </form>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}