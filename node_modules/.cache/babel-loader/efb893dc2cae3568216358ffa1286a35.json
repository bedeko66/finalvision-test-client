{"ast":null,"code":"var _jsxFileName = \"/Users/bedeko/dev/finervision_dev_test/client/src/Step1.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom'; // import { yupResolver } from '@hookform/resolvers/yup';\n// import * as yup from \"yup\";\n\nimport { useData } from \"./DataContext\";\nimport Joi from \"joi-browser\";\nimport { toast } from 'react-toastify'; // const schema = yup.object().shape({\n//     firstName: yup.string().matches(/^([^0-9])$/, \"First name shpuld not contain numbers\").required(\"First name is required field\"),\n//     surname: yup.string().matches(/^([^0-9])$/, \"surname shpuld not contain numbers\").required(\"surname is required field\"),\n//     email: yup.string().email(\"Invalid Email.\").required(\"Email is required\"),\n// })\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Step1 = () => {\n  _s();\n\n  const {\n    setValues,\n    data\n  } = useData(); // const [ setErrors, errors ] = useState(\"\");\n\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm({\n    defaultValues: {\n      firstName: data.firstName,\n      surname: data.surname,\n      email: data.email\n    },\n    mode: \"onBlur\" // resolver: yupResolver(schema)\n\n  });\n  const history = useHistory();\n  const schema = {\n    firstname: Joi.string().min(1).required(),\n    surname: Joi.string().min(2).required(),\n    email: Joi.string().email().required()\n  };\n\n  const validate = () => {\n    const result = Joi.validate(data, schema, {\n      abortEarly: false\n    });\n    if (!result.error) return null;\n    const errors = {};\n\n    for (let item of result.error.details) errors[item.path[0]] = item.message;\n\n    return errors;\n  };\n\n  const onSubmit = data => {\n    let errors = validate();\n\n    if (errors) {\n      Object.values(errors).forEach(err => toast.error(err));\n      return;\n    } else {\n      setValues(data);\n      console.log(data);\n      history.push(\"/step2\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Step 1: Your details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"firstName\",\n        name: \"firstName\",\n        type: \"text\",\n        placeholder: \"First Name\",\n        ...register('firstName', {\n          required: true\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register('surname', {\n          required: true\n        }),\n        name: \"surname\",\n        type: \"text\",\n        placeholder: \"Surname\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register('email', {\n          required: true\n        }),\n        name: \"email\",\n        type: \"email\",\n        placeholder: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Step1, \"QRUpmtfid4w6RIceXgoXclYwj2c=\", false, function () {\n  return [useData, useForm, useHistory];\n});\n\n_c = Step1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Step1\");","map":{"version":3,"sources":["/Users/bedeko/dev/finervision_dev_test/client/src/Step1.js"],"names":["React","useState","useForm","useHistory","useData","Joi","toast","Step1","setValues","data","register","handleSubmit","errors","defaultValues","firstName","surname","email","mode","history","schema","firstname","string","min","required","validate","result","abortEarly","error","item","details","path","message","onSubmit","Object","values","forEach","err","console","log","push"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom';\n// import { yupResolver } from '@hookform/resolvers/yup';\n// import * as yup from \"yup\";\nimport { useData } from \"./DataContext\";\nimport Joi from \"joi-browser\";\nimport { toast } from 'react-toastify';\n\n// const schema = yup.object().shape({\n//     firstName: yup.string().matches(/^([^0-9])$/, \"First name shpuld not contain numbers\").required(\"First name is required field\"),\n//     surname: yup.string().matches(/^([^0-9])$/, \"surname shpuld not contain numbers\").required(\"surname is required field\"),\n//     email: yup.string().email(\"Invalid Email.\").required(\"Email is required\"),\n\n// })\n\nexport const Step1 = () => {\n\n    const { setValues, data } = useData();\n    // const [ setErrors, errors ] = useState(\"\");\n\n    const { register, handleSubmit, errors } = useForm({\n        defaultValues: { firstName: data.firstName, surname: data.surname, email: data.email },\n        mode: \"onBlur\",\n        // resolver: yupResolver(schema)\n    });\n    const history = useHistory();\n\n    const schema = {\n        firstname: Joi.string().min(1).required(),\n        surname: Joi.string().min(2).required(),\n        email: Joi.string().email().required(),\n    }\n\n    const validate = () => {\n        const result = Joi.validate(data, schema, {\n            abortEarly: false\n        });\n        if (!result.error) return null;\n        \n        const errors = {};\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        \n        return errors;\n    }\n\n    const onSubmit = (data) => {\n        let errors = validate();\n        if (errors) {\n            Object.values(errors).forEach(err => toast.error(err))\n            return\n        } else {  \n            setValues(data)\n            console.log(data);\n            history.push(\"/step2\")\n        }\n    }\n\n    return (\n        <div>\n            <h2>Step 1: Your details</h2>\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <input \n                id=\"firstName\"\n                name=\"firstName\"\n                type=\"text\"\n                placeholder=\"First Name\"\n                {...register('firstName', { required: true })} \n                  />\n            <input {...register('surname', { required: true })} name=\"surname\" type=\"text\" placeholder=\"Surname\" />\n            <input {...register('email', { required: true })} name=\"email\" type=\"email\" placeholder=\"Email\" />\n            <button type=\"submit\" >Next</button>\n        </form>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}