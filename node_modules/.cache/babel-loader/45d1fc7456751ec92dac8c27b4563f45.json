{"ast":null,"code":"var _jsxFileName = \"/Users/bedeko/dev/finervision_dev_test/client/src/Step1.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom'; // import { yupResolver } from '@hookform/resolvers/yup';\n// import * as yup from \"yup\";\n\nimport { useData } from \"./DataContext\";\nimport Joi from \"joi-browser\";\nimport { toast } from 'react-toastify'; // const schema = yup.object().shape({\n//     firstName: yup.string().matches(/^([^0-9])$/, \"First name shpuld not contain numbers\").required(\"First name is required field\"),\n//     surname: yup.string().matches(/^([^0-9])$/, \"surname shpuld not contain numbers\").required(\"surname is required field\"),\n//     email: yup.string().email(\"Invalid Email.\").required(\"Email is required\"),\n// })\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Step1 = () => {\n  _s();\n\n  const {\n    setValues,\n    data\n  } = useData();\n  const [rawData, setRawData] = useState(\"\");\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm({\n    defaultValues: {\n      firstName: data.firstName,\n      surname: data.surname,\n      email: data.email\n    },\n    mode: \"onBlur\" // resolver: yupResolver(schema)\n\n  });\n  const history = useHistory();\n  const schema = {\n    firstName: Joi.string().alphanum().min(1).max(50).required().label(\"First Name\"),\n    surname: Joi.string().alphanum().min(2).max(50).required().label(\"Surname\"),\n    email: Joi.string().email().required().label(\"Email\")\n  };\n\n  const validate = usrData => {\n    const options = {\n      abortEarly: false\n    };\n    let ifNo = {\n      isNumber: function (str) {\n        var pattern = /[^a-zA-Z]/g;\n        return pattern.test(str); // returns a boolean\n      }\n    };\n    console.log(usrData);\n\n    if (ifNo.isNumber(usrData.firstName)) {\n      toast.error('Only text allowed');\n      return;\n    }\n\n    const result = Joi.validate(usrData, schema, options);\n    console.log(result);\n    if (!result.errors) return null;\n    let v_errors = {};\n\n    for (let item of result.error.details) {\n      v_errors[item.path[0]] = item.message;\n    }\n\n    console.log(v_errors);\n    return v_errors;\n  };\n\n  const onSubmit = data => {\n    // console.log(data);\n    let usrData = data;\n    setRawData(usrData);\n    console.log(data);\n    let errors = validate(usrData);\n    console.log(errors);\n\n    if (errors) {\n      Object.values(errors).forEach(err => {\n        toast.error(err);\n        return;\n      });\n    } else {\n      setValues(data);\n      setRawData(\"\");\n      console.log(data); // history.push(\"/step2\")\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Step 1: Your details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"firstName\",\n        name: \"firstName\",\n        type: \"text\",\n        placeholder: \"First Name\",\n        ...register('firstName')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register('surname'),\n        name: \"surname\",\n        type: \"text\",\n        placeholder: \"Surname\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register('email'),\n        name: \"email\",\n        type: \"email\",\n        placeholder: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Step1, \"qt0+1b895oMRLz2Tu4FqSOnWr64=\", false, function () {\n  return [useData, useForm, useHistory];\n});\n\n_c = Step1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Step1\");","map":{"version":3,"sources":["/Users/bedeko/dev/finervision_dev_test/client/src/Step1.js"],"names":["React","useState","useForm","useHistory","useData","Joi","toast","Step1","setValues","data","rawData","setRawData","register","handleSubmit","errors","defaultValues","firstName","surname","email","mode","history","schema","string","alphanum","min","max","required","label","validate","usrData","options","abortEarly","ifNo","isNumber","str","pattern","test","console","log","error","result","v_errors","item","details","path","message","onSubmit","Object","values","forEach","err"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom';\n// import { yupResolver } from '@hookform/resolvers/yup';\n// import * as yup from \"yup\";\nimport { useData } from \"./DataContext\";\nimport Joi from \"joi-browser\";\nimport { toast } from 'react-toastify';\n\n// const schema = yup.object().shape({\n//     firstName: yup.string().matches(/^([^0-9])$/, \"First name shpuld not contain numbers\").required(\"First name is required field\"),\n//     surname: yup.string().matches(/^([^0-9])$/, \"surname shpuld not contain numbers\").required(\"surname is required field\"),\n//     email: yup.string().email(\"Invalid Email.\").required(\"Email is required\"),\n\n// })\n\nexport const Step1 = () => {\n\n    const { setValues, data } = useData();\n    const [ rawData, setRawData ] = useState(\"\");\n\n    const { register, handleSubmit, errors } = useForm({\n        defaultValues: { firstName: data.firstName, surname: data.surname, email: data.email },\n        mode: \"onBlur\",\n        // resolver: yupResolver(schema)\n    });\n    const history = useHistory();\n\n    const schema = {\n        firstName: Joi.string().alphanum().min(1).max(50).required().label(\"First Name\"),\n        surname: Joi.string().alphanum().min(2).max(50).required().label(\"Surname\"),\n        email: Joi.string().email().required().label(\"Email\"),\n    }\n\n    const validate = (usrData) => {\n        const options = { abortEarly: false };\n        let ifNo = {\n            isNumber:function(str) {\n                var pattern = /[^a-zA-Z]/g;\n                return pattern.test(str);  // returns a boolean\n            }\n        }\n        console.log(usrData);\n        if (ifNo.isNumber(usrData.firstName)){\n            toast.error('Only text allowed')\n            return \n        }\n       \n        const result = Joi.validate(usrData, schema, options);\n        console.log(result);\n        if (!result.errors) return null;\n        \n        let v_errors = {};\n        for (let item of result.error.details) {\n            v_errors[item.path[0]] = item.message;\n        }\n        console.log(v_errors);\n        return v_errors;\n    }\n\n    const onSubmit = (data) => {\n        // console.log(data);\n        let usrData = data\n        setRawData(usrData);\n        console.log(data);\n\n        let errors = validate(usrData);\n        console.log(errors);\n        if (errors) {\n            Object.values(errors).forEach(err => {\n                toast.error(err)\n                return\n            })\n        } else {  \n            setValues(data)\n            setRawData(\"\")\n            console.log(data);\n            // history.push(\"/step2\")\n        }\n    }\n\n    return (\n        <div>\n            <h2>Step 1: Your details</h2>\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <input \n                id=\"firstName\"\n                name=\"firstName\"\n                type=\"text\"\n                placeholder=\"First Name\"\n                {...register('firstName')} \n                  />\n            <input {...register('surname')} name=\"surname\" type=\"text\" placeholder=\"Surname\" />\n            <input {...register('email')} name=\"email\" type=\"email\" placeholder=\"Email\" />\n            <button type=\"submit\">Next</button>\n        </form>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}