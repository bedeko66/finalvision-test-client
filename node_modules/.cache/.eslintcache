[{"/Users/bedeko/dev/finervision_dev_test/client/src/index.js":"1","/Users/bedeko/dev/finervision_dev_test/client/src/App.js":"2","/Users/bedeko/dev/finervision_dev_test/client/src/reportWebVitals.js":"3","/Users/bedeko/dev/finervision_dev_test/client/src/Step1.js":"4","/Users/bedeko/dev/finervision_dev_test/client/src/Step3.js":"5","/Users/bedeko/dev/finervision_dev_test/client/src/Step2.js":"6","/Users/bedeko/dev/finervision_dev_test/client/src/DataContext.js":"7","/Users/bedeko/dev/finervision_dev_test/client/src/Step4.js":"8"},{"size":651,"mtime":1626690327222,"results":"9","hashOfConfig":"10"},{"size":684,"mtime":1626694680534,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1626657097661,"results":"12","hashOfConfig":"10"},{"size":2895,"mtime":1626691921775,"results":"13","hashOfConfig":"10"},{"size":1195,"mtime":1626694761557,"results":"14","hashOfConfig":"10"},{"size":2862,"mtime":1626693681147,"results":"15","hashOfConfig":"10"},{"size":514,"mtime":1626680887209,"results":"16","hashOfConfig":"10"},{"size":2083,"mtime":1626696017145,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"wn5dg3",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"/Users/bedeko/dev/finervision_dev_test/client/src/index.js",[],["39","40"],"/Users/bedeko/dev/finervision_dev_test/client/src/App.js",[],"/Users/bedeko/dev/finervision_dev_test/client/src/reportWebVitals.js",[],"/Users/bedeko/dev/finervision_dev_test/client/src/Step1.js",["41","42"],"import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom';\nimport { useData } from \"./DataContext\";\nimport Joi from \"joi-browser\";\nimport { toast } from 'react-toastify';\n\n\nexport const Step1 = () => {\n\n    const { setValues, data } = useData();\n\n    const { register, handleSubmit, errors } = useForm({\n        defaultValues: { firstName: data.firstName, surname: data.surname, email: data.email },\n        mode: \"onBlur\",\n    });\n    const history = useHistory();\n\n    const schema = {\n        firstName: Joi.string().alphanum().min(1).max(50).required().label(\"First Name\"),\n        surname: Joi.string().alphanum().min(2).max(50).required().label(\"Surname\"),\n        email: Joi.string().email().required().label(\"Email\"),\n    }\n\n    const validate = (usrData) => {\n        const options = { abortEarly: false };\n        let ifNo = {\n            isNumber:function(str) {\n                var pattern = /[^a-zA-Z]/g;\n                return pattern.test(str);\n            }\n        }\n        if (ifNo.isNumber(usrData.firstName)){\n            toast.error('Only text allowed')\n            return \n        }\n       \n        const result = Joi.validate(usrData, schema, options);\n        if (!result.error) return null;\n        \n        let v_errors = {};\n        for (let item of result.error.details) {\n            v_errors[item.path[0]] = item.message;\n        }\n        return v_errors;\n    }\n\n    const onSubmit = (data) => {\n        let usrData = data\n\n        \n        let errors = validate(usrData);\n        if (errors) {\n            Object.values(errors).forEach(err => {\n                toast.error(err)\n                return\n            })\n        } else {  \n            setValues(data)\n            history.push(\"/step2\")\n        }\n    }\n\n    return (\n        <div className=\"container m-2\">\n            <h5>Step 1: Your details</h5>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <label htmlFor=\"firstName\">First Name</label>\n                <input \n                    id=\"firstName\"\n                    name=\"firstName\"\n                    type=\"text\"\n                    {...register('firstName')} \n                    />\n                <label htmlFor=\"surname\">Surname</label>\n                <input \n                    {...register('surname')}\n                    id=\"surname\"\n                    name=\"surname\" \n                    type=\"text\" \n                />\n                <label htmlFor=\"email\">Email</label>\n                <input \n                    {...register('email')}\n                    id=\"email\"\n                    name=\"email\" \n                    type=\"email\" \n                />\n                <button type=\"submit\">Next</button>\n            </form>\n            <h5>Step 2: More comments</h5>\n            <h5>Step 3: Final comments</h5>\n        </div>\n    )\n}","/Users/bedeko/dev/finervision_dev_test/client/src/Step3.js",["43","44","45"],"import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport { useData } from \"./DataContext\";\nimport { toast } from 'react-toastify';\n\n\nexport const Step3 = () => {\n\nconst { setValues, data } = useData();\n// const { formData } = useData() \nconst history = useHistory();\n\nconst { register, handleSubmit, errors } = useForm({\n    defaultValues: { \n        comments: data.comments,\n     },\n    mode: \"onBlur\",\n});\n\n\nconst onSubmit = async (usrData) => {  \n    setValues(usrData)\n    history.push(\"/step4\")\n}\n\n    return (\n        <div className=\"container m-2\">\n            <h5>Step 1: Your details</h5>\n            <h5>Step 2: More comments</h5>\n            <h5>Step 3: Final comments</h5>\n            <form onSubmit={handleSubmit(onSubmit)}> \n                <label htmlFor=\"comments\">Comments</label>\n                <textarea \n                id=\"commetns\"\n                {...register('comments')} \n                name=\"comments\" \n                type=\"text\" \n                cols=\"30\" rows=\"5\"></textarea>\n                <button type=\"submit\">Next</button>\n            </form>\n        </div>\n    )\n}","/Users/bedeko/dev/finervision_dev_test/client/src/Step2.js",["46","47"],"import React,  { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom';\nimport { useData } from \"./DataContext\";\n\nimport Joi from \"joi-browser\";\nimport { toast } from 'react-toastify';\n\nexport const Step2 = () => {\n\nconst history = useHistory();\n\nconst { setValues, data } = useData();\n\nconst { register, handleSubmit, errors } = useForm({\n    defaultValues: { \n        phone: data.phone,\n        gender: data.gender,\n        birthday: data.birthday,\n        birthmonth: data.birthmonth,\n        birthyear: data.birthyear\n     },\n    mode: \"onBlur\",\n});\n\nconst schema = {\n    phone: Joi.number().min(10).required().label(\"Phone\"),\n    gender: Joi.string().alphanum().label(\"Gender\"),\n    birthday: Joi.number().min(1).max(31).label(\"Day of birth\"),\n    birthmonth: Joi.number().min(1).max(12).label(\"Month of birth\"),\n    birthyear: Joi.number().min(1900).max(2021).label(\"Year of birth\"),\n}\nconst validate = (usrData) => {\n    const options = { abortEarly: false };\n   \n    const result = Joi.validate(usrData, schema, options);\n    if (!result.error) return null;\n    \n    let v_errors = {};\n    for (let item of result.error.details) {\n        v_errors[item.path[0]] = item.message;\n    }\n    return v_errors;\n}\n\nconst onSubmit = (usrData) => {\n\n    let errors = validate(usrData);\n    if (errors) {\n        Object.values(errors).forEach(err => {\n            toast.error(err)\n            return\n        })\n    } else {  \n        setValues(usrData)\n\n        // setValues(birthdate)\n        // console.log(usrData);\n        // console.log(data);\n        history.push(\"/step3\")\n    }\n}\n\n    return (\n        <div className=\"container m-2 d-flex flex-column align-center\">\n            <h5>Step 1: Your details</h5>\n            <h5>Step 2: More comments</h5>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <label htmlFor=\"phone\">Telephone number</label>\n                <input \n                    {...register('phone')}\n                    name=\"phone\" \n                    type=\"text\" \n                />\n                <label htmlFor=\"gender\">Gender</label>\n                <input \n                    {...register('gender')} \n                    name=\"gender\" \n                    type=\"text\" \n                />\n                <label >Date of Birth</label>\n                <input {...register('birthday')} name=\"birthday\" min=\"1\" max=\"31\" type=\"number\" placeholder=\"birthday\" />\n                <input {...register('birthmonth')} name=\"birthmonth\" min=\"1\" max=\"12\" type=\"number\" placeholder=\"birthmonth\" />\n                <input {...register('birthyear')} name=\"birthyear\" min=\"1920\" max=\"2021\" type=\"number\" placeholder=\"birthyear\" />\n                <button type=\"submit\">Next</button>\n            </form>\n            <h5>Step 3: Final comments</h5>\n        </div>\n    )\n}","/Users/bedeko/dev/finervision_dev_test/client/src/DataContext.js",[],"/Users/bedeko/dev/finervision_dev_test/client/src/Step4.js",["48"],"import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { useData } from \"./DataContext\";\nimport { toast } from 'react-toastify';\n\n\nexport const FormDataCheck = () => {\n    const history = useHistory();\n    const { setValues, data } = useData();\n    const [finalData, setFinalData] = useState({})\n\n    useEffect(() => { \n        setFinalData(data)\n        // eslint-disable-next-line\n    },[]);\n\n    const handleSubmit = async (usrData) => {\n        //send to db\n        try {\n            \n            const payload = {\n                firstname: data.firstName,\n                surname: data.surname,\n                email :data.email,\n                phone: data.phone,\n                gender: data.gender,\n                birthdate:  data.birthday + '-' + data.birthmonth + '-' + data.birthyear,\n                comments: data.comments\n            }\n            \n            console.log(payload);\n            const res = await axios.post('http://localhost:5000/user-form/save', { payload })\n            console.log(res)\n        } catch (error) {\n            toast.warning(error.message);\n        }\n    \n        toast(`Thank you ${data.firstName}! Your details are sent!`);\n        history.push(\"/\")\n    }\n    return ( \n        <div className=\"container\">\n            <h5>Step 1: Your details</h5>\n            <h5>Step 2: More comments</h5>\n            <h5>Step 3: Final comments</h5>\n            <div>\n                <h5>My Details</h5>\n                <p>First Name:{finalData.firstName}</p>\n                <p>Surname: {finalData.surname}</p>\n                <p>Email: {finalData.email}</p>\n                <p>Telephone: {finalData.phone}</p>\n                <p>Gender: {finalData.gender}</p>\n                <p>Date of Birth: {finalData.birthday + '-' + finalData.birthmonth + '-' + finalData.birthyear}</p>\n                <p>Comments: {finalData.comments}</p>\n                <button type=\"button\" onClick={handleSubmit} className=\"btn\">Submit</button>\n            </div>\n        </div>\n     );\n}\n",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":17,"nodeType":"55","messageId":"56","endLine":1,"endColumn":25},{"ruleId":"53","severity":1,"message":"57","line":13,"column":37,"nodeType":"55","messageId":"56","endLine":13,"endColumn":43},{"ruleId":"53","severity":1,"message":"58","line":4,"column":8,"nodeType":"55","messageId":"56","endLine":4,"endColumn":13},{"ruleId":"53","severity":1,"message":"59","line":6,"column":10,"nodeType":"55","messageId":"56","endLine":6,"endColumn":15},{"ruleId":"53","severity":1,"message":"57","line":15,"column":33,"nodeType":"55","messageId":"56","endLine":15,"endColumn":39},{"ruleId":"53","severity":1,"message":"54","line":1,"column":18,"nodeType":"55","messageId":"56","endLine":1,"endColumn":26},{"ruleId":"53","severity":1,"message":"57","line":15,"column":33,"nodeType":"55","messageId":"56","endLine":15,"endColumn":39},{"ruleId":"53","severity":1,"message":"60","line":10,"column":13,"nodeType":"55","messageId":"56","endLine":10,"endColumn":22},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'errors' is assigned a value but never used.","'axios' is defined but never used.","'toast' is defined but never used.","'setValues' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]